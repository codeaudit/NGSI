Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> term
Rule 3     term -> factor factor
Rule 4     term -> factor
Rule 5     factor -> GSM LPAREN expression RPAREN
Rule 6     factor -> LPAREN expression RPAREN
Rule 7     factor -> LETTER

Terminals, with rules where they appear

GSM                  : 5
LETTER               : 7
LPAREN               : 5 6
PLUS                 : 1
RPAREN               : 5 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 5 6 0
factor               : 3 3 4
term                 : 1 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (3) term -> . factor factor
    (4) term -> . factor
    (5) factor -> . GSM LPAREN expression RPAREN
    (6) factor -> . LPAREN expression RPAREN
    (7) factor -> . LETTER

    GSM             shift and go to state 6
    LPAREN          shift and go to state 1
    LETTER          shift and go to state 5

    term                           shift and go to state 3
    expression                     shift and go to state 4
    factor                         shift and go to state 2

state 1

    (6) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (3) term -> . factor factor
    (4) term -> . factor
    (5) factor -> . GSM LPAREN expression RPAREN
    (6) factor -> . LPAREN expression RPAREN
    (7) factor -> . LETTER

    GSM             shift and go to state 6
    LPAREN          shift and go to state 1
    LETTER          shift and go to state 5

    term                           shift and go to state 3
    expression                     shift and go to state 7
    factor                         shift and go to state 2

state 2

    (3) term -> factor . factor
    (4) term -> factor .
    (5) factor -> . GSM LPAREN expression RPAREN
    (6) factor -> . LPAREN expression RPAREN
    (7) factor -> . LETTER

    RPAREN          reduce using rule 4 (term -> factor .)
    PLUS            reduce using rule 4 (term -> factor .)
    $end            reduce using rule 4 (term -> factor .)
    GSM             shift and go to state 6
    LPAREN          shift and go to state 1
    LETTER          shift and go to state 5

    factor                         shift and go to state 8

state 3

    (2) expression -> term .

    RPAREN          reduce using rule 2 (expression -> term .)
    PLUS            reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)


state 4

    (0) S' -> expression .
    (1) expression -> expression . PLUS term

    PLUS            shift and go to state 9


state 5

    (7) factor -> LETTER .

    GSM             reduce using rule 7 (factor -> LETTER .)
    LPAREN          reduce using rule 7 (factor -> LETTER .)
    LETTER          reduce using rule 7 (factor -> LETTER .)
    RPAREN          reduce using rule 7 (factor -> LETTER .)
    PLUS            reduce using rule 7 (factor -> LETTER .)
    $end            reduce using rule 7 (factor -> LETTER .)


state 6

    (5) factor -> GSM . LPAREN expression RPAREN

    LPAREN          shift and go to state 10


state 7

    (6) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term

    RPAREN          shift and go to state 11
    PLUS            shift and go to state 9


state 8

    (3) term -> factor factor .

    RPAREN          reduce using rule 3 (term -> factor factor .)
    PLUS            reduce using rule 3 (term -> factor factor .)
    $end            reduce using rule 3 (term -> factor factor .)


state 9

    (1) expression -> expression PLUS . term
    (3) term -> . factor factor
    (4) term -> . factor
    (5) factor -> . GSM LPAREN expression RPAREN
    (6) factor -> . LPAREN expression RPAREN
    (7) factor -> . LETTER

    GSM             shift and go to state 6
    LPAREN          shift and go to state 1
    LETTER          shift and go to state 5

    term                           shift and go to state 12
    factor                         shift and go to state 2

state 10

    (5) factor -> GSM LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . term
    (3) term -> . factor factor
    (4) term -> . factor
    (5) factor -> . GSM LPAREN expression RPAREN
    (6) factor -> . LPAREN expression RPAREN
    (7) factor -> . LETTER

    GSM             shift and go to state 6
    LPAREN          shift and go to state 1
    LETTER          shift and go to state 5

    term                           shift and go to state 3
    expression                     shift and go to state 13
    factor                         shift and go to state 2

state 11

    (6) factor -> LPAREN expression RPAREN .

    GSM             reduce using rule 6 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 6 (factor -> LPAREN expression RPAREN .)
    LETTER          reduce using rule 6 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 6 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 6 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 6 (factor -> LPAREN expression RPAREN .)


state 12

    (1) expression -> expression PLUS term .

    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)


state 13

    (5) factor -> GSM LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term

    RPAREN          shift and go to state 14
    PLUS            shift and go to state 9


state 14

    (5) factor -> GSM LPAREN expression RPAREN .

    GSM             reduce using rule 5 (factor -> GSM LPAREN expression RPAREN .)
    LPAREN          reduce using rule 5 (factor -> GSM LPAREN expression RPAREN .)
    LETTER          reduce using rule 5 (factor -> GSM LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (factor -> GSM LPAREN expression RPAREN .)
    PLUS            reduce using rule 5 (factor -> GSM LPAREN expression RPAREN .)
    $end            reduce using rule 5 (factor -> GSM LPAREN expression RPAREN .)

